{"data":{"markdownRemark":{"html":"<p>SASS -- (Syntactically Awesome Stylesheets - Синтаксически Шикарные Таблицы Стилей) препроцессор для CSS -- позволяет писать код, соответствующий принципам DRY, который будет быстрее, эффективнее и проще в обслуживании. При подготовке использовалась книга <a href=\"https://abookapart.com/products/sass-for-web-designers\">Dan Cederholm Sass for Web Designers</a></p>\n<h2>SASS синтаксис.</h2>\n<p>Для SASS есть два разных синтаксиса последний -- SCSS наиболее удобен по нескольким причинам:</p>\n<ul>\n<li>Позволяет использовать синтаксис CSS при этом все будет работать отлично.</li>\n<li>Можно легко преобразовать действующий CSS в SASS.</li>\n<li>Не требует расстановки отступов при форматировании кода.</li>\n</ul>\n<p>Пример синтаксиса SCSS</p>\n<pre><code class=\"language-scss\">$pink: #ea4c89; //создаем переменную с цветом\np {\n    font-size: 12px;\n    color: $pink; //применяем переменную\n}\np strong {\n    text-transform: uppercase;\n}\n</code></pre>\n<p>Это будет скомпилировано в такой CSS:</p>\n<pre><code class=\"language-css\">p {\n    font-size: 12px;\n    color: #ea4c89;\n}\np strong {\n    text-transform: uppercase;\n}\n</code></pre>\n<p>Оригинальный SASS синтаксис выглядит по другому:</p>\n<pre><code class=\"language-scss\">$pink: #ea4c89\np\n    font-size: 12px\n    color: $pink\np strong\n    text-transform: uppercase\n</code></pre>\n<p>Прощайте фигурные скобки и точки с запятой. Остаются только идентификаторы и пробелы.</p>\n<h2>Настраиваем рабочее окружение для SASS.</h2>\n<p>Для Windows необходима предварительная установка Ruby с помощью <a href=\"https://rubyinstaller.org/\">RubyInstaller</a>.\nЗатем нужно выполнить установку <code>gem SASS</code>.</p>\n<p>Для отслеживания изменений и компиляции в css используем команду :</p>\n<pre><code>$ sass --watch werewolf.scss:vampire.css\n</code></pre>\n<p>Хорошей практикой будет считаться хранить SASS файлы в отдельной папке и неплохо было бы следить за ее изменениями:</p>\n<pre><code>$ sass --watch stylesheets/sass:stylesheets\n</code></pre>\n<p>В этом случае в <code>stylesheets</code> хранятся CSS файлы и папка SASS, где лежат SASS исходники.</p>\n<p>Также можно определить стиль вывода для CSS это делается с помощью <code>--style</code></p>\n<ul>\n<li>По умолчанию <code>nested</code>. Вложенный стиль. Вложенность соответствует иерархии элементов <code>HTML</code></li>\n</ul>\n<pre><code class=\"language-scss\">ol {\n margin: 10px 0;\n padding: 10px 0; }\n  ol li {\n   font-size: 2em;\n   line-height: 1.4; }\n    ol li p {\n     color: #333; }\n</code></pre>\n<ul>\n<li><code>Expanded</code>. Выглядит как <code>CSS</code>, написанный вручную.</li>\n</ul>\n<pre><code class=\"language-scss\">ol {\nmargin: 10px 0;\npadding: 10px 0;}\nol li {\nfont-size: 2em;\nline-height: 1.4;\n}\nol li p {\ncolor: #333;\n</code></pre>\n<ul>\n<li><code>Compact</code>. Правила <code>CSS</code> сгруппированы в одну строку, селекторы друг под другом.</li>\n</ul>\n<pre><code class=\"language-scss\">ol { margin: 10px 0; padding: 10px 0; }\nol li { font-size: 2em; line-height: 1.4; }\nol li p { color: #333; }\n</code></pre>\n<pre><code>* `Compressed`. Все ненужные пробелы и переводы строк удалены для уменьшения размера выходного файла.\n\n```scss\nol{margin:10px 0;padding:10px 0;}ol li{font-size:2em;line-height:1.4;}ol li p{color:#333;}\n</code></pre>\n<h2>Используем SASS.</h2>\n<h3>Вложенные правила.</h3>\n<p>Вместо того, чтобы повторять селекторы  -- мы можем использовать вложенные правила в соответствие со структурой разметки <code>HTML</code>.</p>\n<pre><code class=\"language-scss\">header[role=\"banner\"] {\n margin: 20px 0 30px 0;\n border-bottom: 4px solid #333;\n #logo {\n  float: left;\n  margin: 0 20px 0 0;\n img {\n  display: block;\n  opacity: .95;\n  }\n}\n</code></pre>\n<p>Также мы можем создавать вложенные имена свойств которые указаны через дефис, например:</p>\n<pre><code class=\"language-scss\">font: {\n    size: 54px;\n    family: Jubilat, Georgia, serif;\n    weight: bold;\n}\n</code></pre>\n<h3>Ссылаемся на родительские селекторы через &#x26;</h3>\n<p>Вместо <code>&#x26;</code> при компиляции будет подставлен родительский селектор.</p>\n<pre><code class=\"language-scss\">a {\n    font-weight: bold;\n    text-decoration: none;\n    color: red;\n    border-bottom: 2px solid red;\n    &#x26;:hover {\n        color: maroon;\n        border-color: maroon;\n    }\n}\n</code></pre>\n<h3>Комментарии в SASS</h3>\n<p>Комментируем так же как в <code>CSS</code>, но если хотим чтобы комментарий сохранился даже при компиляции в <code>compressed style</code></p>\n<pre><code class=\"language-scss\">/* ! This is a multi-line comment that will\nappear in the final .css file. Even in compressed style. */\n</code></pre>\n<h3>Переменные</h3>\n<p>Все значения свойств <code>CSS</code> которые постоянно повторяются в стилях могут быть назанчены переменным в <code>SASS</code>.\nПри компиляции все переменные будут заменены на их значения.</p>\n<pre><code class=\"language-scss\">$color-main: #333;\n$color-light: #999;\n$color-accent: #ea4c89;\n$font-sans: \"Proxima Nova\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n$font-serif: Jubilat, Georgia, serif;\n</code></pre>\n<p>Кстати для цветов есть функции <code>darken</code>  и  <code>lighten</code> позволяющие получить более темные или светлые оттенки выбранного цвета соответственно.</p>\n<pre><code class=\"language-scss\">section.primary {\n    background: lighten($color-accent, 30%);\n}\nsection.secondary {\n    background: darken($color-accent, 30%);\n}\n</code></pre>\n<h3>Миксины</h3>\n<p>Если нам нужно определять и многократно использовать не только значения свойств но и целые блоки стилей -- здесь есть работа для миксинов</p>\n<pre><code class=\"language-scss\">//объявляем mixin\n@mixin title-style {\n    margin: 0 0 20px 0;\n    font-family: $font-serif;\n    font-size: 20px;\n    font-weight: bold;\n    text-transform: uppercase;\n}\n//и используем\nsection.main h2 {\n    @include title-style;\n}\n</code></pre>\n<p>Миксины могут принимать аргументы и даже назначать значения по умолчанию, если вдруг при использовании какой-то из аргументов не задан</p>\n<pre><code class=\"language-scss\">@mixin title-style($color, $background: #eee) {\n//назначили два аргумента для миксина\n    margin: 0 0 20px 0;\n    font-family: $font-serif;\n    font-size: 20px;\n    font-weight: bold;\n    text-transform: uppercase;\n    color: $color;\n    background: $background;\n}\n\nsection.main h2 {\n    @include title-style(#c63);\n// передан только аргумент $color значит $background получит значение по умолчанию\n}\nsection.secondary h3 {\n    @include title-style(#39c, #333);\n// переданы оба аргумента значит оба получат действующие значения\n}\n</code></pre>","frontmatter":{"title":"Гайд по SASS."}}},"pageContext":{"slug":"/2018-11-5-Sass-guide/"}}